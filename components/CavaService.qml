pragma Singleton
import Quickshell
import Quickshell.Io
import QtQuick

Singleton {
    id: root

    property int barCount: 64
    property var values: []
    property bool isRunning: false
    
    // Catppuccin Macchiato Color Palette
    property var catppuccin: ({
    "rosewater": "#ffd1dc",  // s√°ng h∆°n, h·ªìng kem
    "flamingo": "#f9a5ac",   // ƒë·ªè cam s√°ng
    "pink": "#ffb3f4",       // h·ªìng s√°ng
    "mauve": "#caa9ff",      // t√≠m hoa c√† ƒë·∫≠m
    "red": "#ff6b6b",        // ƒë·ªè neon
    "maroon": "#f08484",     // ƒë·ªè ƒë·∫•t h·ªìng
    "peach": "#ffb380",      // cam ƒë√†o s√°ng
    "yellow": "#ffe97f",     // v√†ng pastel
    "green": "#9fffa9",      // xanh l√° s√°ng
    "teal": "#7fffe0",       // xanh ng·ªçc s√°ng
    "sky": "#7fd9ff",        // xanh da tr·ªùi
    "sapphire": "#67b7ff",   // xanh lam ƒë·∫≠m h∆°n
    "blue": "#6b8fff",       // xanh d∆∞∆°ng r·ª±c
    "lavender": "#a99fff",   // t√≠m nh·∫°t
    "text": "#dce3ff",       // ch·ªØ s√°ng
    "subtext1": "#bfc6e8",
    "subtext0": "#9fa6c0",
    "overlay2": "#8a91b0",
    "overlay1": "#757ca0",
    "overlay0": "#62678a",
    "surface2": "#4e526e",
    "surface1": "#3e4157",
    "surface0": "#2c2e42",
    "base": "#1f2130",       // n·ªÅn h∆°i xanh x√°m
    "mantle": "#1a1b28",
    "crust": "#141520"
})


    property var gradientColors: [
        catppuccin.sapphire,    // Xanh l·∫°nh
        catppuccin.blue,        // Xanh d∆∞∆°ng
        catppuccin.sky,         // Xanh da tr·ªùi
        catppuccin.teal,        // Xanh ng·ªçc
        catppuccin.lavender,    // T√≠m o·∫£i h∆∞∆°ng
        catppuccin.mauve,       // T√≠m hoa c√†
        catppuccin.green,       // Xanh l√° (trung t√≠nh)
        catppuccin.yellow,      // V√†ng (b·∫Øt ƒë·∫ßu ·∫•m)
        catppuccin.peach,       // Cam ƒë√†o
        catppuccin.maroon,      // H·ªìng ƒë·∫•t
        catppuccin.red,         // ƒê·ªè
        catppuccin.pink,        // H·ªìng
        catppuccin.flamingo,    // H·ªìng flamingo
        catppuccin.rosewater    // H·ªìng nh·∫°t ·∫•m
    ]

    Component.onCompleted: {
        console.log("üéµ CavaService initialized")
        initializeValues()
    }

    function initializeValues() {
        let arr = []
        for (let i = 0; i < barCount; i++) {
            arr.push(2)
        }
        values = arr
    }

    Process {
        id: cavaProc
        running: false

        command: [
            "sh", "-c",
            `printf '[general]
framerate=25
bars=${root.barCount}
autosens=1
[smoothing]
noise_reduction=50
[output]
method=raw
raw_target=/dev/stdout
data_format=ascii
ascii_max_range=100
bit_format=8bit' | cava -p /dev/stdin`
        ]

        stdout: SplitParser {
            onRead: function(data) {
                let lines = data.split("\n")
                for (let i = 0; i < lines.length; i++) {
                    let line = lines[i].trim()
                    if (line === "") continue
                    
                    try {
                        let newValues = line.split(";")
                            .filter(val => val.trim() !== "")
                            .map(val => {
                                let num = parseInt(val, 10)
                                return isNaN(num) ? 2 : Math.max(2, Math.min(num, 200))
                            })
                        
                        if (newValues.length >= root.barCount) {
                            root.values = newValues.slice(0, root.barCount)
                        }
                    } catch (error) {
                        console.error("Error parsing CAVA data:", error)
                    }
                }
            }
        }

        onRunningChanged: {
            if (running) {
                console.log("üéµ CAVA process started")
            } else {
                console.log("üîá CAVA process stopped")
                initializeValues()
            }
        }
    }

    function open() {
        console.log("üéµ Opening CAVA visualizer...")
        initializeValues()
        cavaProc.running = true
    }

    function close() {
        console.log("üîá Closing CAVA visualizer...")
        cavaProc.running = false
        initializeValues()
    }
}
